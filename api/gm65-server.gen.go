// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /disable_code)
	DisableCode(ctx echo.Context) error

	// (POST /enable_code)
	EnableCode(ctx echo.Context) error

	// (GET /info)
	GetInfo(ctx echo.Context) error

	// (POST /light)
	Light(ctx echo.Context) error

	// (GET /mock)
	GetMock(ctx echo.Context, params GetMockParams) error

	// (GET /read)
	ReadPayload(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DisableCode converts echo context to params.
func (w *ServerInterfaceWrapper) DisableCode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DisableCode(ctx)
	return err
}

// EnableCode converts echo context to params.
func (w *ServerInterfaceWrapper) EnableCode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EnableCode(ctx)
	return err
}

// GetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInfo(ctx)
	return err
}

// Light converts echo context to params.
func (w *ServerInterfaceWrapper) Light(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Light(ctx)
	return err
}

// GetMock converts echo context to params.
func (w *ServerInterfaceWrapper) GetMock(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMockParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMock(ctx, params)
	return err
}

// ReadPayload converts echo context to params.
func (w *ServerInterfaceWrapper) ReadPayload(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadPayload(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/disable_code", wrapper.DisableCode)
	router.POST(baseURL+"/enable_code", wrapper.EnableCode)
	router.GET(baseURL+"/info", wrapper.GetInfo)
	router.POST(baseURL+"/light", wrapper.Light)
	router.GET(baseURL+"/mock", wrapper.GetMock)
	router.GET(baseURL+"/read", wrapper.ReadPayload)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWUW/bNhD+K8Rtj1ok21uT6q3phiLYinXJ3gLDoMmzxU4mGfKUzCj83weSki3bspet",
	"Gbq+2bzTx7vvvjveJxBmZY1GTR7KT+DQW6M9xj+eODW+OwonwmhCTeEnt7ZWgpMyOv/ojY4fiApXPPz6",
	"1uECSvgm38HnyerzBAubzSYDiV44ZQMKlO2FbIXe8yWyJ0UVa8+Ekci4lp0RwtctYopM4ozWNoa5j4q6",
	"WSUs/shVzec1Jrjg7iGLDlDeA3I9moT/XF9BBg8OMmis4JABr2uYZoB/8pWtMYC2vulK8OSUXsImA4dc",
	"hhisMxYdqUSl5evaJMN+cFQha42MKk4sHHjBtUbHIlb/1teXV8W4GE0uX78aH1++2Z6Y+UcUBJGiCDVT",
	"emGOw6q4k0/c4ewRnVepiPvxdR6s8+iHM7ooiiEOVkZifYxlnZGNIJbMfaB371/9MATkzYJifJLTQGU7",
	"M4vmPuC4GBfFpBidBT2Z9Bb3RNKjZ3KfhH7EehDf8aV3O6FDBgvjVpygBKVp0qu10oRLdJHlthNOIXX2",
	"oVgdPjTKoQyyb2/s3KdDmTwpEtXMWDrXXrVaVsRMNOz1lQ49BxlI5dtfnuRBP3U+x7F6FI1TtL4L3Z4Y",
	"vOZeiTcNVdupE76Zh9MdREVk05TpxL8f+DV3IfX8t9vv3oZxcNd2XRAje/PhJiAp6utzKxgoLkYXRWDG",
	"WNTcKihhclFcBGFYTlUMMm/TnXX1tsZH/oIW4uC8kVDCj8nrbapCKAx6ujZy/Y8G7rHCttPw3CzeOQ4o",
	"+HhAtxmxpXpEvRuiae71Xo5xUZy6eeuXHzwvmwy+/zefxTDzpJ+/ofon/dUwnfL5HxLd9dISB2bBLVLj",
	"NAuPRnysDwepZ2bRf+EgO6jQO6SbcMFwmi+zfvRfxAHm7xoh0PtFU9dr5mJCKFny/izm4ng8Lc5fovml",
	"dOlTec4SsRvqz5KkR+pG/GJbwC8vyJURf5wUpEct2/YxLHhudyulbUND+nsf8MIYd3yFhM5DeT+0tXWo",
	"c2RKB84w7GoqmB8adGvIQPP4LondwElvLrkGs17pDt+86Rcntdtiz3S5ZzwuqO1qviB0zITe92yOqFui",
	"5RHFt8jlh3Yd/g/bPGbw7PbeJvKZvBGm1j7L268/D+nu9/DpSxQ+hdJtTVG9vX3pfhrk5dE9dtJuXN1u",
	"S2We10bwujKeyqvisoDNdPNXAAAA//+3CNIVIw4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
