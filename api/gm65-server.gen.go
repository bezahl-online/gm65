// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /info)
	GetInfo(ctx echo.Context) error

	// (POST /light)
	Light(ctx echo.Context) error

	// (GET /read)
	ReadPayload(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetInfo(ctx echo.Context) error {
	var err error

	ctx.Set("BasicAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInfo(ctx)
	return err
}

// Light converts echo context to params.
func (w *ServerInterfaceWrapper) Light(ctx echo.Context) error {
	var err error

	ctx.Set("BasicAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Light(ctx)
	return err
}

// ReadPayload converts echo context to params.
func (w *ServerInterfaceWrapper) ReadPayload(ctx echo.Context) error {
	var err error

	ctx.Set("BasicAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadPayload(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	ctx.Set("BasicAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/info", wrapper.GetInfo)
	router.POST(baseURL+"/light", wrapper.Light)
	router.GET(baseURL+"/read", wrapper.ReadPayload)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVTW/bOBD9KwR3j16Ltrf50C3poQjaomncW2AEtDiyGEgkS46aGoH+e0FSsq1IMRIk",
	"PVnmkG/ePL4ZPtJMV0YrUOho+kgtOKOVg/DHIcfadUt+JdMKQaH/5MaUMuMotUrunVbhQFZAxf3XvxZy",
	"mtJ/kj18EqMuibC0aZoJFeAyK41HoWmbkFTgHN8AeZBYkHYt0wIIV6ILUn+6RYzEufC/xmoDFmWswPBt",
	"qWOgnwkLIG2QYMGR+AWXcaXAkoA1ofCbV6YEmtLz0zM2Z7PF6fnJnE4obg0EtlaqTSDSruj1PWRIA7MA",
	"dSdVroe0Cm7FA7dw9wusk1G7Pr9uB+l2HNKZTRkb0pjQSgsoh1jGalFnSGL4EOjT15MPY0BO5xj4CY4w",
	"BOzCJIQPAedsztiCzY6CPlv0DveZomcv1D76a6C6t9Aw6XLvLzqhubYVR5pSqXBxcNdSIWzABpVbAz6H",
	"1MXHuFr4WUsLgqa3tM3YbV+NVfIgMSvutMFhNlB1FTuklJsCiQ4B5zVTdeUTgOLr0qcQ0rVfDoVPtFd1",
	"t2fI1UFWW4nbpW+yqOAldzK7qLHYNbs/s/are4gC0cTm7szfJ37JrS89+X7z30ff1Mu267wZycX1lUeS",
	"eOjPnWEom86mzCujDShuJE3pYsqm3hiGYxFIJl3aDYzIdgNYW0V8f4Vx8tRzjuj8cBjQkMuGOXclPCfA",
	"K59g0p+Vc8beb0AeDo+RMbmsswycy+uy3BIbCgJB4u4J/T8yGUuwY5w8Ge1NyJIEJ4XG0S789kv/EsLR",
	"xeDwUovtq2rut6OL13NUiL3/Rzp95P0A7Loh311gM35Tr9PnTbJ2b9MRQzrCw7PTvnM5giXa29SRNYBq",
	"ixEDN94AF9ftI/cXHRkqeLETd4W8UTeE6MKjun37PNaiP/zR97j4SKWbhTS97U3B21Wz8lHrp0cI1rZs",
	"Z2CaJBVXG52esVNGm1XzJwAA//9TM/iMbAkAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
